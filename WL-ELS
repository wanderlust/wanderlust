;;; WL-ELS  -*-Emacs-Lisp-*-

;;;;;;;;;;;;;;;;;;;;;   DO NOT EDIT THIS FILE   ;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;     INTERNAL USE ONLY     ;;;;;;;;;;;;;;;;;;;;;


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; generic modules
(defconst WL-MODULES '(
   wl wl-folder wl-summary wl-action wl-message
   wl-vars wl-draft wl-util wl-version wl-address wl-addrmgr
   wl-highlight wl-demo wl-refile wl-thread
   wl-fldmgr wl-expire wl-template wl-score wl-acap wl-news
   wl-spam wl-batch
   ))

(defconst ELMO-MODULES '(
   pldap acap slp mmimap
   elmo-signal elmo-date elmo-util elmo-version
   elmo-vars elmo elmo-msgdb
   elmo-net elmo-imap4 elmo-pop3 elmo-nntp
   elmo-localdir elmo-localnews elmo-map elmo-maildir
   elmo-multi elmo-access elmo-filter
   elmo-archive elmo-pipe elmo-cache
   elmo-internal elmo-flag elmo-sendlog elmo-null
   elmo-dop elmo-search elmo-file elmo-split elmo-rss
   elmo-spam elsp-bogofilter elsp-sa elsp-bsfilter elsp-spamoracle
   modb modb-entity modb-legacy modb-standard
   ))


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; Emacsen
;; (< 20 emacs-major-version) && !(featurep 'mule)
(unless (coding-system-p 'utf-7-imap)
  (add-to-list 'ELMO-MODULES 'utf7))

(cond
 ((featurep 'xemacs)
  (setq WL-MODULES (append WL-MODULES (list 'wl-dnd 'wl-xmas)))
  (setq ELMO-MODULES (append (list 'elmo-database) ELMO-MODULES)))
 ((and (boundp 'emacs-major-version) (>= emacs-major-version 21))
  (setq WL-MODULES (append WL-MODULES (list 'wl-e21))))
 ((featurep 'mule)
  (setq WL-MODULES (append WL-MODULES (list 'wl-mule)))))

(defconst WL-AUTOLOAD-MODULES '(
   auto-autoloads custom-load
   ))

(if (or (fboundp 'dynamic-link)
	;; static
	(fboundp 'open-database))
    (add-to-list 'ELMO-MODULES 'elmo-database))

(if (module-installed-p 'shimbun)
    (add-to-list 'ELMO-MODULES 'elmo-shimbun))

(if (module-installed-p 'spamfilter)
    (add-to-list 'ELMO-MODULES 'elsp-spamfilter))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; SEMI

(setq WL-MODULES (append WL-MODULES (list 'wl-mime)))
(setq ELMO-MODULES (append ELMO-MODULES (list 'elmo-mime)))
(if (not (module-installed-p 'luna))
    (error "Use new FLIM & SEMI.  See INSTALL or INSTALL.ja"))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; Utils
(defvar UTILS-MODULES '(rfc2368 im-wl wl-mailto wl-addrbook wl-complete))

;; OpenSSL/SSLeay package is also needed.
(if (module-installed-p 'base64)
    (add-to-list 'UTILS-MODULES 'ssl))

(defvar modules-alist
  (list
   (cons ELMODIR ELMO-MODULES)
   (cons WLDIR WL-MODULES)
   (if (module-installed-p 'bbdb)
       (cons UTILSDIR (list 'bbdb-wl)))
   (if wl-install-utils
       (cons UTILSDIR UTILS-MODULES))))
